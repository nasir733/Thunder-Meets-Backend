openapi: 3.0.3
info:
  title: Thunder Meets API
  version: 1.0.0
  description: The Meeting App For Ultimate Productivity
paths:
  /api/schema/:
    get:
      operationId: api_schema_retrieve
      description: |-
        OpenApi3 schema for this API. Format can be selected via content negotiation.

        - YAML: application/vnd.oai.openapi
        - JSON: application/vnd.oai.openapi+json
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      - in: query
        name: lang
        schema:
          type: string
          enum:
          - af
          - ar
          - ar-dz
          - ast
          - az
          - be
          - bg
          - bn
          - br
          - bs
          - ca
          - cs
          - cy
          - da
          - de
          - dsb
          - el
          - en
          - en-au
          - en-gb
          - eo
          - es
          - es-ar
          - es-co
          - es-mx
          - es-ni
          - es-ve
          - et
          - eu
          - fa
          - fi
          - fr
          - fy
          - ga
          - gd
          - gl
          - he
          - hi
          - hr
          - hsb
          - hu
          - hy
          - ia
          - id
          - ig
          - io
          - is
          - it
          - ja
          - ka
          - kab
          - kk
          - km
          - kn
          - ko
          - ky
          - lb
          - lt
          - lv
          - mk
          - ml
          - mn
          - mr
          - ms
          - my
          - nb
          - ne
          - nl
          - nn
          - os
          - pa
          - pl
          - pt
          - pt-br
          - ro
          - ru
          - sk
          - sl
          - sq
          - sr
          - sr-latn
          - sv
          - sw
          - ta
          - te
          - tg
          - th
          - tk
          - tr
          - tt
          - udm
          - uk
          - ur
          - uz
          - vi
          - zh-hans
          - zh-hant
      tags:
      - api
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/vnd.oai.openapi:
              schema:
                type: object
                additionalProperties: {}
            application/yaml:
              schema:
                type: object
                additionalProperties: {}
            application/vnd.oai.openapi+json:
              schema:
                type: object
                additionalProperties: {}
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
  /auth/github/:
    post:
      operationId: auth_github_create
      description: |-
        class used for social authentications
        example usage for facebook with access_token
        -------------
        from allauth.socialaccount.providers.facebook.views import FacebookOAuth2Adapter

        class FacebookLogin(SocialLoginView):
            adapter_class = FacebookOAuth2Adapter
        -------------

        example usage for facebook with code

        -------------
        from allauth.socialaccount.providers.facebook.views import FacebookOAuth2Adapter
        from allauth.socialaccount.providers.oauth2.client import OAuth2Client

        class FacebookLogin(SocialLoginView):
            adapter_class = FacebookOAuth2Adapter
            client_class = OAuth2Client
            callback_url = 'localhost:8000'
        -------------
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SocialLogin'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SocialLogin'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SocialLogin'
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SocialLogin'
          description: ''
  /auth/google/:
    post:
      operationId: auth_google_create
      description: |2-
            Retrive code (or token) By accessing Google’s endpoint, you can get code or token

        If you’re using Authorization Code Grant, you can get code from following URL

        https://accounts.google.com/o/oauth2/v2/auth?redirect_uri=<CALLBACK_URL_YOU_SET_ON_GOOGLE>&prompt=consent&response_type=code&client_id=<YOUR CLIENT ID>&scope=openid%20email%20profile&access_type=offline

        If you’re using Implicit Grant, you can get token from following URL

        https://accounts.google.com/o/oauth2/v2/auth?redirect_uri=<CALLBACK_URL_YOU_SET_ON_GOOGLE>&prompt=consent&response_type=token&client_id=<YOUR CLIENT ID>&scope=openid%20email%20profile

        POST code or token to specified URL(/dj-rest-auth/google/)
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SocialLogin'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SocialLogin'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SocialLogin'
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SocialLogin'
          description: ''
  /auth/login/:
    post:
      operationId: auth_login_create
      description: |-
        Check the credentials and return the REST Token
        if the credentials are valid and authenticated.
        Calls Django Auth login method to register User ID
        in Django session framework

        Accept the following POST parameters: username, password
        Return the REST Framework Token Object's key.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Login'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Login'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWT'
          description: ''
  /auth/logout/:
    post:
      operationId: auth_logout_create
      description: |-
        Calls Django logout method and delete the Token object
        assigned to the current User object.

        Accepts/Returns nothing.
      tags:
      - auth
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /auth/password/change/:
    post:
      operationId: auth_password_change_create
      description: |-
        Calls Django Auth SetPasswordForm save method.

        Accepts the following POST parameters: new_password1, new_password2
        Returns the success/fail message.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordChange'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordChange'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordChange'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /auth/password/reset/:
    post:
      operationId: auth_password_reset_create
      description: |-
        Calls Django Auth PasswordResetForm save method.

        Accepts the following POST parameters: email
        Returns the success/fail message.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomPasswordReset'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CustomPasswordReset'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CustomPasswordReset'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /auth/password/reset/confirm/:
    post:
      operationId: auth_password_reset_confirm_create
      description: |-
        Password reset e-mail link is confirmed, therefore
        this resets the user's password.

        Accepts the following POST parameters: token, uid,
            new_password1, new_password2
        Returns the success/fail message.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /auth/registration/:
    post:
      operationId: auth_registration_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomRegister'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CustomRegister'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CustomRegister'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWT'
          description: ''
  /auth/registration/resend-email/:
    post:
      operationId: auth_registration_resend_email_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResendEmailVerification'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ResendEmailVerification'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ResendEmailVerification'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /auth/registration/verify-email/:
    post:
      operationId: auth_registration_verify_email_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyEmail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/VerifyEmail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/VerifyEmail'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /auth/token/refresh/:
    post:
      operationId: auth_token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /auth/token/verify/:
    post:
      operationId: auth_token_verify_create
      description: |-
        Takes a token and indicates if it is valid.  This view provides no
        information about a token's fitness for a particular use.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenVerify'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenVerify'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenVerify'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenVerify'
          description: ''
  /auth/user/:
    get:
      operationId: auth_user_retrieve
      description: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.

        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      tags:
      - auth
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dj_Rest_Auth_Custom_User_'
          description: ''
    put:
      operationId: auth_user_update
      description: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.

        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Dj_Rest_Auth_Custom_User_'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Dj_Rest_Auth_Custom_User_'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Dj_Rest_Auth_Custom_User_'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dj_Rest_Auth_Custom_User_'
          description: ''
    patch:
      operationId: auth_user_partial_update
      description: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.

        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedDj_Rest_Auth_Custom_User_'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedDj_Rest_Auth_Custom_User_'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedDj_Rest_Auth_Custom_User_'
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dj_Rest_Auth_Custom_User_'
          description: ''
  /meeting/:
    get:
      operationId: meeting_list
      description: |-
        #Sample Post Request Body for creating a meeting
            {
           "agendas":[
              {
                 "name":"htmasdfdsfl",
                 "description":"talk about hrml",
                 "time_stamp":"2022-08-28T18:30:09Z"
              }
           ],
           "meeting_name":"Test",
           "meeting_date":"2022-08-28",
           "meeting_time":"18:32:35",
           "meeting_location":"Wah",
           "meeting_description":"alskdjfldsjkf",
           "meeting_status":true,
           "meeting_timestamp":"2022-08-28T18:33:47Z",
           "meeting_created_at":"2022-08-28T18:34:08.312519Z",
           "meeting_updated_at":"2022-08-28T18:34:08.312538Z",
        }
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - meeting
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedMeetingList'
          description: ''
    post:
      operationId: meeting_create
      description: |-
        #Sample Post Request Body for creating a meeting
            {
           "agendas":[
              {
                 "name":"htmasdfdsfl",
                 "description":"talk about hrml",
                 "time_stamp":"2022-08-28T18:30:09Z"
              }
           ],
           "meeting_name":"Test",
           "meeting_date":"2022-08-28",
           "meeting_time":"18:32:35",
           "meeting_location":"Wah",
           "meeting_description":"alskdjfldsjkf",
           "meeting_status":true,
           "meeting_timestamp":"2022-08-28T18:33:47Z",
           "meeting_created_at":"2022-08-28T18:34:08.312519Z",
           "meeting_updated_at":"2022-08-28T18:34:08.312538Z",
        }
      tags:
      - meeting
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Meeting'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Meeting'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Meeting'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Meeting'
          description: ''
  /meeting/{id}/:
    get:
      operationId: meeting_retrieve
      description: |-
        #Sample Post Request Body for creating a meeting
            {
           "agendas":[
              {
                 "name":"htmasdfdsfl",
                 "description":"talk about hrml",
                 "time_stamp":"2022-08-28T18:30:09Z"
              }
           ],
           "meeting_name":"Test",
           "meeting_date":"2022-08-28",
           "meeting_time":"18:32:35",
           "meeting_location":"Wah",
           "meeting_description":"alskdjfldsjkf",
           "meeting_status":true,
           "meeting_timestamp":"2022-08-28T18:33:47Z",
           "meeting_created_at":"2022-08-28T18:34:08.312519Z",
           "meeting_updated_at":"2022-08-28T18:34:08.312538Z",
        }
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this meetings.
        required: true
      tags:
      - meeting
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Meeting'
          description: ''
    put:
      operationId: meeting_update
      description: |-
        #Sample Post Request Body for creating a meeting
            {
           "agendas":[
              {
                 "name":"htmasdfdsfl",
                 "description":"talk about hrml",
                 "time_stamp":"2022-08-28T18:30:09Z"
              }
           ],
           "meeting_name":"Test",
           "meeting_date":"2022-08-28",
           "meeting_time":"18:32:35",
           "meeting_location":"Wah",
           "meeting_description":"alskdjfldsjkf",
           "meeting_status":true,
           "meeting_timestamp":"2022-08-28T18:33:47Z",
           "meeting_created_at":"2022-08-28T18:34:08.312519Z",
           "meeting_updated_at":"2022-08-28T18:34:08.312538Z",
        }
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this meetings.
        required: true
      tags:
      - meeting
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Meeting'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Meeting'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Meeting'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Meeting'
          description: ''
    patch:
      operationId: meeting_partial_update
      description: |-
        #Sample Post Request Body for creating a meeting
            {
           "agendas":[
              {
                 "name":"htmasdfdsfl",
                 "description":"talk about hrml",
                 "time_stamp":"2022-08-28T18:30:09Z"
              }
           ],
           "meeting_name":"Test",
           "meeting_date":"2022-08-28",
           "meeting_time":"18:32:35",
           "meeting_location":"Wah",
           "meeting_description":"alskdjfldsjkf",
           "meeting_status":true,
           "meeting_timestamp":"2022-08-28T18:33:47Z",
           "meeting_created_at":"2022-08-28T18:34:08.312519Z",
           "meeting_updated_at":"2022-08-28T18:34:08.312538Z",
        }
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this meetings.
        required: true
      tags:
      - meeting
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedMeeting'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedMeeting'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedMeeting'
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Meeting'
          description: ''
    delete:
      operationId: meeting_destroy
      description: |-
        #Sample Post Request Body for creating a meeting
            {
           "agendas":[
              {
                 "name":"htmasdfdsfl",
                 "description":"talk about hrml",
                 "time_stamp":"2022-08-28T18:30:09Z"
              }
           ],
           "meeting_name":"Test",
           "meeting_date":"2022-08-28",
           "meeting_time":"18:32:35",
           "meeting_location":"Wah",
           "meeting_description":"alskdjfldsjkf",
           "meeting_status":true,
           "meeting_timestamp":"2022-08-28T18:33:47Z",
           "meeting_created_at":"2022-08-28T18:34:08.312519Z",
           "meeting_updated_at":"2022-08-28T18:34:08.312538Z",
        }
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this meetings.
        required: true
      tags:
      - meeting
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /meeting/generate_agora_token/:
    get:
      operationId: meeting_generate_agora_token_retrieve
      description: |-
        #Sample Post Request Body for creating a meeting
            {
           "agendas":[
              {
                 "name":"htmasdfdsfl",
                 "description":"talk about hrml",
                 "time_stamp":"2022-08-28T18:30:09Z"
              }
           ],
           "meeting_name":"Test",
           "meeting_date":"2022-08-28",
           "meeting_time":"18:32:35",
           "meeting_location":"Wah",
           "meeting_description":"alskdjfldsjkf",
           "meeting_status":true,
           "meeting_timestamp":"2022-08-28T18:33:47Z",
           "meeting_created_at":"2022-08-28T18:34:08.312519Z",
           "meeting_updated_at":"2022-08-28T18:34:08.312538Z",
        }
      tags:
      - meeting
      security:
      - jwtAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Meeting'
          description: ''
components:
  schemas:
    Agendas:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          nullable: true
          maxLength: 100
        description:
          type: string
          nullable: true
        time_stamp:
          type: string
          format: date-time
          nullable: true
        meeting:
          type: integer
          nullable: true
      required:
      - id
    CountryEnum:
      enum:
      - AF
      - AX
      - AL
      - DZ
      - AS
      - AD
      - AO
      - AI
      - AQ
      - AG
      - AR
      - AM
      - AW
      - AU
      - AT
      - AZ
      - BS
      - BH
      - BD
      - BB
      - BY
      - BE
      - BZ
      - BJ
      - BM
      - BT
      - BO
      - BQ
      - BA
      - BW
      - BV
      - BR
      - IO
      - BN
      - BG
      - BF
      - BI
      - CV
      - KH
      - CM
      - CA
      - KY
      - CF
      - TD
      - CL
      - CN
      - CX
      - CC
      - CO
      - KM
      - CG
      - CD
      - CK
      - CR
      - CI
      - HR
      - CU
      - CW
      - CY
      - CZ
      - DK
      - DJ
      - DM
      - DO
      - EC
      - EG
      - SV
      - GQ
      - ER
      - EE
      - SZ
      - ET
      - FK
      - FO
      - FJ
      - FI
      - FR
      - GF
      - PF
      - TF
      - GA
      - GM
      - GE
      - DE
      - GH
      - GI
      - GR
      - GL
      - GD
      - GP
      - GU
      - GT
      - GG
      - GN
      - GW
      - GY
      - HT
      - HM
      - VA
      - HN
      - HK
      - HU
      - IS
      - IN
      - ID
      - IR
      - IQ
      - IE
      - IM
      - IL
      - IT
      - JM
      - JP
      - JE
      - JO
      - KZ
      - KE
      - KI
      - KW
      - KG
      - LA
      - LV
      - LB
      - LS
      - LR
      - LY
      - LI
      - LT
      - LU
      - MO
      - MG
      - MW
      - MY
      - MV
      - ML
      - MT
      - MH
      - MQ
      - MR
      - MU
      - YT
      - MX
      - FM
      - MD
      - MC
      - MN
      - ME
      - MS
      - MA
      - MZ
      - MM
      - NA
      - NR
      - NP
      - NL
      - NC
      - NZ
      - NI
      - NE
      - NG
      - NU
      - NF
      - KP
      - MK
      - MP
      - 'NO'
      - OM
      - PK
      - PW
      - PS
      - PA
      - PG
      - PY
      - PE
      - PH
      - PN
      - PL
      - PT
      - PR
      - QA
      - RE
      - RO
      - RU
      - RW
      - BL
      - SH
      - KN
      - LC
      - MF
      - PM
      - VC
      - WS
      - SM
      - ST
      - SA
      - SN
      - RS
      - SC
      - SL
      - SG
      - SX
      - SK
      - SI
      - SB
      - SO
      - ZA
      - GS
      - KR
      - SS
      - ES
      - LK
      - SD
      - SR
      - SJ
      - SE
      - CH
      - SY
      - TW
      - TJ
      - TZ
      - TH
      - TL
      - TG
      - TK
      - TO
      - TT
      - TN
      - TR
      - TM
      - TC
      - TV
      - UG
      - UA
      - AE
      - GB
      - UM
      - US
      - UY
      - UZ
      - VU
      - VE
      - VN
      - VG
      - VI
      - WF
      - EH
      - YE
      - ZM
      - ZW
      type: string
    CustomPasswordReset:
      type: object
      description: Serializer for requesting a password reset e-mail.
      properties:
        email:
          type: string
          format: email
      required:
      - email
    CustomRegister:
      type: object
      properties:
        username:
          type: string
          maxLength: 255
          minLength: 1
        email:
          type: string
          format: email
        password1:
          type: string
          writeOnly: true
        password2:
          type: string
          writeOnly: true
        first_name:
          type: string
        last_name:
          type: string
      required:
      - email
      - first_name
      - last_name
      - password1
      - password2
    Dj_Rest_Auth_Custom_User_:
      type: object
      description: User model w/o password
      properties:
        id:
          type: integer
          readOnly: true
        country:
          $ref: '#/components/schemas/CountryEnum'
        last_login:
          type: string
          format: date-time
          nullable: true
        created:
          type: string
          format: date-time
          readOnly: true
        modified:
          type: string
          format: date-time
          readOnly: true
        email:
          type: string
          format: email
          maxLength: 255
        first_name:
          type: string
          maxLength: 255
        last_name:
          type: string
          maxLength: 255
        slug:
          type: string
          readOnly: true
          pattern: ^[-a-zA-Z0-9_]+$
        phone_no:
          type: string
          nullable: true
          maxLength: 128
        gender:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/GenderEnum'
          - $ref: '#/components/schemas/NullEnum'
        is_active:
          type: boolean
        date_joined:
          type: string
          format: date-time
          readOnly: true
        username:
          type: string
          nullable: true
          maxLength: 255
        avatar:
          type: string
          format: uri
          nullable: true
      required:
      - country
      - created
      - date_joined
      - email
      - first_name
      - id
      - last_name
      - modified
      - slug
    GenderEnum:
      enum:
      - male
      - female
      - non-binary
      type: string
    JWT:
      type: object
      description: Serializer for JWT authentication.
      properties:
        access_token:
          type: string
        refresh_token:
          type: string
        user:
          $ref: '#/components/schemas/Dj_Rest_Auth_Custom_User_'
      required:
      - access_token
      - refresh_token
      - user
    Login:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
      required:
      - password
    Meeting:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        agendas:
          type: array
          items:
            $ref: '#/components/schemas/Agendas'
        meeting_name:
          type: string
          maxLength: 100
        meeting_location:
          type: string
          maxLength: 100
        meeting_description:
          type: string
        meeting_status:
          type: boolean
        meeting_timestamp:
          type: string
          format: date-time
          nullable: true
        meeting_created_at:
          type: string
          format: date-time
          readOnly: true
        meeting_updated_at:
          type: string
          format: date-time
          readOnly: true
        meeting_created_by:
          type: integer
          nullable: true
      required:
      - agendas
      - id
      - meeting_created_at
      - meeting_description
      - meeting_location
      - meeting_name
      - meeting_updated_at
    NullEnum:
      enum:
      - null
    PaginatedMeetingList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Meeting'
    PasswordChange:
      type: object
      properties:
        new_password1:
          type: string
          maxLength: 128
        new_password2:
          type: string
          maxLength: 128
      required:
      - new_password1
      - new_password2
    PasswordResetConfirm:
      type: object
      description: Serializer for confirming a password reset attempt.
      properties:
        new_password1:
          type: string
          maxLength: 128
        new_password2:
          type: string
          maxLength: 128
        uid:
          type: string
        token:
          type: string
      required:
      - new_password1
      - new_password2
      - token
      - uid
    PatchedDj_Rest_Auth_Custom_User_:
      type: object
      description: User model w/o password
      properties:
        id:
          type: integer
          readOnly: true
        country:
          $ref: '#/components/schemas/CountryEnum'
        last_login:
          type: string
          format: date-time
          nullable: true
        created:
          type: string
          format: date-time
          readOnly: true
        modified:
          type: string
          format: date-time
          readOnly: true
        email:
          type: string
          format: email
          maxLength: 255
        first_name:
          type: string
          maxLength: 255
        last_name:
          type: string
          maxLength: 255
        slug:
          type: string
          readOnly: true
          pattern: ^[-a-zA-Z0-9_]+$
        phone_no:
          type: string
          nullable: true
          maxLength: 128
        gender:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/GenderEnum'
          - $ref: '#/components/schemas/NullEnum'
        is_active:
          type: boolean
        date_joined:
          type: string
          format: date-time
          readOnly: true
        username:
          type: string
          nullable: true
          maxLength: 255
        avatar:
          type: string
          format: uri
          nullable: true
    PatchedMeeting:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        agendas:
          type: array
          items:
            $ref: '#/components/schemas/Agendas'
        meeting_name:
          type: string
          maxLength: 100
        meeting_location:
          type: string
          maxLength: 100
        meeting_description:
          type: string
        meeting_status:
          type: boolean
        meeting_timestamp:
          type: string
          format: date-time
          nullable: true
        meeting_created_at:
          type: string
          format: date-time
          readOnly: true
        meeting_updated_at:
          type: string
          format: date-time
          readOnly: true
        meeting_created_by:
          type: integer
          nullable: true
    ResendEmailVerification:
      type: object
      properties:
        email:
          type: string
          format: email
      required:
      - email
    RestAuthDetail:
      type: object
      properties:
        detail:
          type: string
          readOnly: true
      required:
      - detail
    SocialLogin:
      type: object
      properties:
        access_token:
          type: string
        code:
          type: string
        id_token:
          type: string
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
      - access
      - refresh
    TokenVerify:
      type: object
      properties:
        token:
          type: string
          writeOnly: true
      required:
      - token
    VerifyEmail:
      type: object
      properties:
        key:
          type: string
      required:
      - key
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
    jwtAuth:
      type: apiKey
      in: header
      name: Authorization
      description: Token-based authentication with required prefix "JWT"
